plugins {
    id 'java'
    id 'com.github.johnrengelman.shadow' version '6.1.0'
    id 'maven-publish'
}

group 'me.dessie'
version '1.1.2'

//Make sure the plugin.yml version is similar to the project version.
processResources {
    filesMatching('plugin.yml') {
        expand(ver: project.version)
    }
}

//Apply the java plugin across subprojects.
subprojects {
    apply plugin: 'java'
    apply plugin: 'maven-publish'
}

def realName(String fileName) {
    return fileName.substring(0, fileName.lastIndexOf("."))
}

task spigotReady {
    group 'obfuscate'
    description 'Converts all jars present in the ./build/libs/ directory into Spigot ready jars placed in ./build/reobfuscated/'

    String homeDir    = project.gradle.gradleUserHomeDir.parent.replace("\\", "/")
    String localSpigot = "${homeDir}/.m2/repository/org/spigotmc"

    fileTree(dir: "${project.projectDir}/build/libs", include: [ '*.jar' ]).forEach { file ->
        String output = "tmp/${file.getName()}"

        println "Remapping ${file.getName()}"

        doLast {
            exec {
                workingDir 'build/'

                // convert the jar to the Mojang version and output it into the temporary directory
                commandLine 'java',
                        '-jar', "${project.projectDir}/${toolingDir}/SpecialSource.jar", "net.md_5.specialsource.SpecialSource",
                        '-i', "\"${file.getAbsolutePath()}\"",
                        '-o', output,
                        '-m', "\"${localSpigot}/minecraft-server/${minecraftVersion}/minecraft-server-${minecraftVersion}-maps-mojang.txt\"",
                        '-l', '-r'
            }

            exec {
                workingDir 'build/'

                // remap the generated temporary file to be Spigot mapped
                commandLine 'java',
                        '-jar', "${project.projectDir}/${toolingDir}/SpecialSource.jar", "net.md_5.specialsource.SpecialSource",
                        '-i', output,
                        '-o', "reobf/${realName(file.getName())}-reobf.jar",
                        '-m', "\"${localSpigot}/minecraft-server/${minecraftVersion}/minecraft-server-${minecraftVersion}-maps-spigot.csrg\"",
                        '-l'
            }
        }
    }
}

allprojects {
    version = project.version

    java.sourceCompatibility = JavaVersion.VERSION_17
    java.targetCompatibility = JavaVersion.VERSION_17

    compileJava.options.encoding = 'UTF-8'

    publishing {
        repositories {
            maven {
                name = "GitHubPackages"
                url "https://maven.pkg.github.com/dessie0/dessielib"
                credentials {
                    username = project.findProperty("gpr.user") ?: System.getenv("GITHUB_USERNAME")
                    password = project.findProperty("gpr.key") ?: System.getenv("GITHUB_TOKEN")
                }
            }
        }

        publications {
            gpr(MavenPublication) {
                groupId "me.dessie.dessielib"
                artifactId project.name
                from components.java
            }
        }
    }

    repositories {
        mavenLocal()
        mavenCentral()
    }

    dependencies {
        compileOnly 'org.spigotmc:spigot:' + minecraftVersion + ':remapped-mojang'
    }

}

//Add Core module as a dependency for all other modules, except itself.
configure(subprojects.findAll {it.name != 'core'}) {
    dependencies {
        implementation project(":core")
    }
}

shadowJar {
    archiveName("DessieLib-${rootProject.version}.jar")
}

task shadowLib(type: Jar, dependsOn: shadowJar) {
    group 'shadow'

    // exclude the plugin.yml and change the name
    exclude 'plugin.yml'
    archiveName("DessieLib-${rootProject.version}-lib.jar")

    from zipTree(shadowJar.getArchiveFile())
}

task copyJar(type: Copy) {
    from "$buildDir/libs/DessieLib-" + rootProject.version + '.jar'
    into project.findProperty("outputDir")
}

//shadowJar.finalizedBy copyJar

dependencies {
    implementation project(":core")
    implementation project(":packeteer")
    implementation project(":inventory-api")
    implementation project(":enchantment-api")
    implementation project(":scoreboard-api")
    implementation project(":resourcepack-api")
    implementation project(":particle-api")
}