plugins {
    id 'java'
    id 'com.github.johnrengelman.shadow' version '6.1.0'
    id 'maven-publish'
}

group 'me.dessie'
version '1.1.2'

//Make sure the plugin.yml version is similar to the project version.
processResources {
    filesMatching('plugin.yml') {
        expand(ver: project.version)
    }
}

//Apply the java plugin across subprojects.
subprojects {
    apply plugin: 'java'
    apply plugin: 'maven-publish'
}

allprojects {
    version = project.version

    java.sourceCompatibility = JavaVersion.VERSION_17
    java.targetCompatibility = JavaVersion.VERSION_17

    compileJava.options.encoding = 'UTF-8'

    task obfuscate(type: Exec) {
        description 'Generates a JAR where Mojangs Mappings are mapped to Obfuscated ones. Cannot run properly on a Spigot server.'
        group = 'obfuscate'
        workingDir "${buildDir}"
        toolingDir = rootProject.findProperty("toolingDir")
        ext.homeDir = project.gradle.gradleUserHomeDir.parent

        commandLine 'java', '-cp', toolingDir + '/SpecialSource.jar;' + ext.homeDir + '/.m2/repository/org/spigotmc/spigot/' + minecraftVersion + '/spigot-' + minecraftVersion + '-remapped-mojang.jar', 'net.md_5.specialsource.SpecialSource',
                '--live', '-i', 'libs/' + project.name + "-" + project.version + '.jar',
                '-o', 'libs/' + project.name + "-obf.jar", '-m',
                ext.homeDir + '/.m2/repository/org/spigotmc/minecraft-server/' + minecraftVersion + '/minecraft-server-' + minecraftVersion + '-maps-mojang.txt',
                '--reverse'
    }

    task deobfuscate(type: Exec) {
        description 'Generates a JAR where Obfuscated Mappings are mapped to Spigot ones. Should be used on a Spigot server.'
        group = 'obfuscate'
        workingDir "${buildDir}"
        toolingDir = rootProject.findProperty("toolingDir")
        ext.homeDir = project.gradle.gradleUserHomeDir.parent

        commandLine 'java', '-cp', toolingDir + '/SpecialSource.jar;' + ext.homeDir + '/.m2/repository/org/spigotmc/spigot/' + minecraftVersion + '/spigot-' + minecraftVersion + '-remapped-obf.jar', 'net.md_5.specialsource.SpecialSource',
                '--live', '-i', 'libs/' + project.name + '-obf.jar',
                '-o', 'libs/' + project.name + '.jar', '-m',
                ext.homeDir + '/.m2/repository/org/spigotmc/minecraft-server/' + minecraftVersion + '/minecraft-server-' + minecraftVersion + '-maps-spigot.csrg'
    }

    publishing {
        repositories {
            maven {
                name = "GitHubPackages"
                url "https://maven.pkg.github.com/dessie0/dessielib"
                credentials {
                    username = project.findProperty("gpr.user") ?: System.getenv("GITHUB_USERNAME")
                    password = project.findProperty("gpr.key") ?: System.getenv("GITHUB_TOKEN")
                }
            }
        }

        publications {
            gpr(MavenPublication) {
                groupId "me.dessie.dessielib"
                artifactId project.name
                from components.java
            }
        }
    }

    build.finalizedBy obfuscate
    build.finalizedBy deobfuscate

    repositories {
        mavenLocal()
        mavenCentral()
    }

    dependencies {
        compileOnly 'org.spigotmc:spigot:' + minecraftVersion + ':remapped-mojang'
    }

}

//Add Core module as a dependency for all other modules, except itself.
configure(subprojects.findAll {it.name != 'core'}) {
    dependencies {
        implementation project(":core")
    }
}

shadowJar {
    archiveName('DessieLib-' + rootProject.version + '.jar')
}

task shadowLib {
    group = 'shadow'

    // exclude the plugin.yml and change the name
    shadowJar {
        exclude 'plugin.yml'
        archiveName("DessieLib-${rootProject.version}-lib.jar")
    }

    // run shadow jar
    dependsOn 'shadowJar'
}

task copyJar(type: Copy) {
    from "$buildDir/libs/DessieLib-" + rootProject.version + '.jar'
    into project.findProperty("outputDir")
}

//shadowJar.finalizedBy copyJar

dependencies {
    implementation project(":core")
    implementation project(":packeteer")
    implementation project(":inventory-api")
    implementation project(":enchantment-api")
    implementation project(":scoreboard-api")
    implementation project(":resourcepack-api")
    implementation project(":particle-api")
}